#define MaxInt 32767   			  	//最大值
#define MVNum 20    			  	//最大顶点数
typedef  struct { 
   int  vexnum,arcnum;		 	 	//顶点数和边的数目 
   char vexs[MVNum]; 			  	//顶点向量
   int  arcs[MVNum][MVNum];			//邻接矩阵    
}AMGraph;

int LocateVex(AMGraph G,char v){
   int i;  
   for ( i=0; i<G.vexnum; i++)
         if (G.vexs[i]==v) return i;
   return -1;
}
 
void CreateDN(AMGraph &G)  			//创建有向网的邻接矩阵 
{
    int i,j,k,w;
    char v1,v2;
    cin>>G.vexnum;				//输入顶点数
    cin>>G.arcnum;   			//输入边数
    for (i=0;i<G.vexnum;i++) 	//输入图的顶点信息
		cin>>G.vexs[i];
    for (i=0;i<G.vexnum;i++) 	//矩阵初始化
		for (j=0;j<G.vexnum;j++) 
			G.arcs[i][j]=(i==j)? 0:MaxInt;
    for (k=0;k<G.arcnum;k++)	//依次输入边信息
	{	         
		cin>>v1>>v2>>w;
        i=LocateVex(G,v1);  
		j=LocateVex(G,v2);	
		G.arcs[i][j]=w;       	
	}   
 
}
void PrintGraph(AMGraph G)          //输出图的邻接矩阵	 
{    
	cout<<"图的邻接矩阵：";
  	for (int i=0;i<G.vexnum;i++)
	{	cout<<endl;
		for (int j=0;j<G.vexnum;j++){
			if (G.arcs[i][j]==MaxInt) 
		  		  printf("    ∞");
		  	else 	
		  		  printf("%5d",G.arcs[i][j]);
		}
	}
}