#include <cstdio>
#include <iostream> 
#include <algorithm>
using namespace std;
#include "graph.h"		//图的定义、 有向网的建立以及输出函数 

typedef struct {
	char v;
	int w;
}Gra;

Gra g[MVNum];

bool cmp(Gra a, Gra b)
{
	return a.w < b.w;
}
        
void ShortestPath_DIJ(AMGraph G,int v0)
{ //以v0为源点，求v0到图中其余各点的最短路径，并输出 
	/****************begin****************/
	int n = G.vexnum;
    bool S[MVNum];
    int D[MVNum], Path[MVNum];
    for (int v = 0; v < n; v ++ ) {
        S[v] = false;
        D[v] = G.arcs[v0][v];
        if (D[v] < MaxInt) Path[v] = v0;
        else Path[v] = -1;
    }
    S[v0] = true;
    D[v0] = 0;
    
    for (int v = 1; v < n; v ++ ) {
        int min = MaxInt;
        for (int w = 0; w < n; w ++ ) {
            if (!S[w] && D[w] < min) {
                v = w;
                min = D[w];
            }
        }
        S[v] = true;
        for (int w = 0; w < n; w ++ ) {
            if (!S[w] && (D[v] + G.arcs[v][w] < D[w])) {
                D[w] = D[v] + G.arcs[v][w];
                Path[w] = v;
            }
        }
    }
    int index = 0;
    for (int i = 0; i < n; i ++ ) {
    	if (G.arcs[v0][i] != 0 && D[i] != MaxInt) {
    		g[index].v = G.vexs[i];
    		g[index ++ ].w = D[i];
		}
	}
	sort(g, g + index, cmp);
	
	for (int i = 0; i < index; i ++ ) {
		cout << G.vexs[v0] << "-->" << g[i].v << " " << g[i].w << endl;
	}
	/****************end ****************/
}

int main()
{
  	AMGraph G; 
  	char u;
  	CreateDN(G);				//建立有向网的邻接矩阵 
  	cin>>u;						//输入源点
  	PrintGraph(G);				//输出有向网的邻接矩阵 
  	int v0=LocateVex(G,u);
  	cout<<"\n从顶点"<<u<<"到图中其他顶点的最短路径：\n" ;
	ShortestPath_DIJ(G,v0); 	//从顶点v0开始，应用dijkstra算法求最短路径 
 	return 0;   
}