#include <cstdio>
#include <iostream> 
using namespace std;
typedef int KeyType;        //关键字类型为int 
typedef struct {
    KeyType key;
    //其他域按需定义(略)    
} ElemType;                //记录类型 
typedef struct {
    ElemType *r;            //基地址 
    int length;             //表的长度 
} SqList;                    //顺序表 

void InitList(SqList &L) {    //初始化顺序表 
    int n;
    cin >> n;
    L.r = new ElemType[n + 1];
    for (int i = 1; i <= n; i++)
        cin >> L.r[i].key;
    L.length = n;
}

void OutputList(SqList L) {    //输出数据表   
    for (int i = 1; i <= L.length; i++) {
        cout << " " << L.r[i].key;
    }
}

// 假设L.r[s+1..m]已经是大根堆，调整L.r[s]，使L.r[s..m]成为一个新大顶堆。
void HeapAdjust(SqList &L, int s, int m) {
    ElemType rc = L.r[s];
    for (int j = 2 * s; j <= m; j *= 2) {
        if (j < m && L.r[j].key < L.r[j + 1].key) {
            j++;
        }
        if (rc.key >= L.r[j].key) {
            break;
        }
        L.r[s] = L.r[j];
        s = j;
    }
    L.r[s] = rc;
}

// 对顺序表L进行堆排序，堆排序的基本思想（参见教材P242——246)
// 1:从最后一个分支结点(编号为L.length/2)开始调整，建立初始大根堆，并按要求输出初始堆 
// 2:依次将堆顶记录L.r[1]与当前未经排序的子序列L.r[1..i]的最后元素交换，然后将L.r[1..i-1]调整为大根堆 
void HeapSort(SqList &L) {
    // 建立初始大根堆
    for (int i = L.length / 2; i >= 1; i--) {
        HeapAdjust(L, i, L.length);
    }

    // 输出初始建立的大根堆
    cout << "初 始 堆：";
    OutputList(L);
    cout << endl;

    // 进行堆排序
    for (int i = L.length; i > 1; i--) {
        // 交换堆顶元素和当前未经排序子序列的最后元素
        ElemType temp = L.r[1];
        L.r[1] = L.r[i];
        L.r[i] = temp;

        // 调整剩余元素为大根堆
        HeapAdjust(L, 1, i - 1);
    }

    // 输出排序结果
    cout << "排序结果：";
    OutputList(L);
    cout << endl;
}

void DestroyList(SqList &L) {    //销毁顺序表 
    delete[] L.r;
    L.r = NULL;
    L.length = 0;
}

int main() {
    SqList L;
    InitList(L);        //输入一组记录的关键字，存放到顺序表L中

    // 调用堆排序算法，输出排序结果 
    HeapSort(L);

    DestroyList(L);        //销毁顺序表        
    return 0;
}