#include <cstdio>
#include <iostream> 
using namespace std;
typedef int KeyType;        //关键字类型为int 
typedef struct {
    KeyType key;
    //其他域按需定义(略)    
} ElemType;                //记录类型 
typedef struct {
    ElemType *r;            //基地址 
    int length;             //表的长度 
} SqList;                    //顺序表 

void InitList(SqList &L) {    //初始化顺序表 
    int n;
    cin >> n;
    L.r = new ElemType[n + 1];
    for (int i = 1; i <= n; i++)
        cin >> L.r[i].key;
    L.length = n;
}

void OutputList(SqList L) {    //输出数据表   
    cout << endl << L.r[1].key;
    for (int i = 2; i <= L.length; i++) {
        cout << " " << L.r[i].key;
    }
}

void SelectSort(SqList &L) {
    // 采用简单选择排序法，将顺序表L的元素按照关键字递增排列
    // 要求输出排序过程中每一趟的排序结果

    for (int i = 1; i < L.length; i++) {
        // 假设当前未排序部分的第一个元素是最小的
        int minIndex = i;

        // 在未排序部分寻找最小元素的索引
        for (int j = i + 1; j <= L.length; j++) {
            if (L.r[j].key < L.r[minIndex].key) {
                minIndex = j;
            }
        }

        // 如果找到的最小元素不是当前假设的最小元素，就交换它们
        if (minIndex!= i) {
            ElemType temp = L.r[i];
            L.r[i] = L.r[minIndex];
            L.r[minIndex] = temp;
        }

        // 输出本趟排序结果
        OutputList(L);
    }
}

void DestroyList(SqList &L) {    //销毁顺序表 
    delete[] L.r;
    L.r = NULL;
    L.length = 0;
}

int main() {
    SqList L;
    InitList(L);        //初始化顺序表L
    SelectSort(L);        //简单选择排序 
    DestroyList(L);        //销毁顺序表    
    return 0;
}