#include <cstdio>
#include <iostream> 
using namespace std;
typedef int KeyType;        //关键字类型为int 
typedef struct {
    KeyType key;
    //其他域按需定义(略)    
} ElemType;                //记录类型 
typedef struct {
    ElemType *r;            //基地址 
    int length;             //表的长度 
} SqList;                    //顺序表 

void InitList(SqList &L) {    //初始化顺序表 
    int n;
    cin >> n;
    L.r = new ElemType[n + 1];
    for (int i = 1; i <= n; i++)
        cin >> L.r[i].key;
    L.length = n;
}

void OutputList(SqList L) {    //输出数据表   
    for (int i = 1; i <= L.length; i++) {
        cout << " " << L.r[i].key;
    }
}

// 对顺序表的子表L.r[low …high]
// 选择L.r[low]为枢轴进行一趟排序，把比枢轴记录小的记录移动到前半段，比枢轴记录大的记录移动到后半段 
// 将枢轴放到合适的位置，函数返回枢轴记录的位置 
int Partition(SqList &L, int low, int high) {
    ElemType pivot = L.r[low];
    while (low < high) {
        while (low < high && L.r[high].key >= pivot.key) {
            high--;
        }
        L.r[low] = L.r[high];

        while (low < high && L.r[low].key <= pivot.key) {
            low++;
        }
        L.r[high] = L.r[low];
    }
    L.r[low] = pivot;
    return low;
}

void QuickSort(SqList &L, int low, int high) {
    // 对顺序表的子表L.r[low …high]进行快速排序 
    if (low < high) {
        int pivotPos = Partition(L, low, high);
        QuickSort(L, low, pivotPos - 1);
        QuickSort(L, pivotPos + 1, high);
    }
}

void DestroyList(SqList &L) {    //销毁顺序表 
    delete[] L.r;
    L.r = NULL;
    L.length = 0;
}

int main() {
    SqList L;
    InitList(L);            //输入一组记录的关键字，存放到顺序表L中

    // 调用快速排序算法，并按要求输出排序结果 
    int firstPivotPos = Partition(L, 1, L.length);
    cout << "第一趟排序后：";
    OutputList(L);
    cout << endl;

    QuickSort(L, 1, L.length);
    cout << "排序最终结果：";
    OutputList(L);
    cout << endl;

    DestroyList(L);            //销毁顺序表    
    return 0;
}