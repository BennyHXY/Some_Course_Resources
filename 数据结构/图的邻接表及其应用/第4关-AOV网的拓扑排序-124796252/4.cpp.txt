#include <cstdio>
#include <iostream>
using namespace std;
#define OK 1
#define ERROR 0
#define OVERFLOW -1
typedef int Status;
#include "stack.h" //顺序栈的定义和基本函数的定义
#include "graph.h" //图的邻接表定义，以及图的建立

// 计算每个顶点的入度，存入数组indegree
void FindIndegree(ALGraph G, int indegree[])
{
    // 计算每个顶点的入度，存入数组indegree
    /*****************begin*****************/
    for (int i = 0; i < G.vexnum; i++)
    {
        indegree[i] = 0;
    }

    ArcNode *p;
    for (int i = 0; i < G.vexnum; i++)
    {
        p = G.vertices[i].firstarc;
        while (p!= NULL)
        {
            int adjvex = p->adjvex;
            indegree[adjvex]++;
            p = p->nextarc;
        }
    }
    /*****************end******************/
}

Status ToplogicalSort(ALGraph G, int topo[])
{
    // 利用栈保存0入度顶点，对图进行拓扑排序。如图中有环，函数返回ERROR，否则用topo数组存储拓扑序列，函数返回OK
    SqStack S;            //定义顺序栈s
    InitStack(S);        //初始化空栈
    /*****************begin*****************/
    int indegree[MVNum];
    FindIndegree(G, indegree);

    // 将入度为0的顶点入栈
    for (int i = 0; i < G.vexnum; i++)
    {
        if (indegree[i] == 0)
        {
            Push(S, i);
        }
    }

    int count = 0; // 记录已经输出的顶点个数

    while (!StackEmpty(S))
    {
        int j;
        Pop(S, j);
        topo[count] = j;
        count++;

        ArcNode *p = G.vertices[j].firstarc;
        while (p!= NULL)
        {
            int k = p->adjvex;
            indegree[k]--;
            if (indegree[k] == 0)
            {
                Push(S, k);
            }
            p = p->nextarc;
        }
    }

    if (count < G.vexnum)
    {
        return ERROR;
    }
    else
    {
        return OK;
    }
    /*****************end******************/
}
int main()
{
    ALGraph G;
    int topo[MVNum];
    CreateDG(G); //建立有向图的邻接表
    PrintGraph(G); //输出图的邻接表
    if (ToplogicalSort(G, topo) == ERROR) //拓扑排序
        cout << "\n 图中有环，拓扑排序失败！";
    else
    {
        cout << "\n 拓扑序列：";
        for (int i = 0; i < G.vexnum; i++)
            printf("%2c", G.vertices[topo[i]].data);
    }

    return 0;
}